apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-minecraft-locks
spec:
  accessModes:
    - ReadWriteMany  # Erlaubt mehreren Pods gleichzeitigen Zugriff
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-minecraft-coordination
data:
  server-lock.sh: |
    #!/bin/bash
    # Script zur Koordination zwischen Minecraft-Servern
    
    # Globales Lock für Minecraft-Server
    LOCK_DIR="/shared-lock"
    LOCK_FILE="${LOCK_DIR}/minecraft.lock"
    POD_NAME=${POD_NAME:-$(hostname)}
    
    # Funktion zum Sperren des Servers
    acquire_lock() {
      # Versuche bis zu 30 Sekunden, das Lock zu erwerben
      for i in {1..30}; do
        if [ -f "$LOCK_FILE" ]; then
          CURRENT_HOLDER=$(cat "$LOCK_FILE")
          if [ "$CURRENT_HOLDER" == "$POD_NAME" ]; then
            echo "Lock bereits von $POD_NAME gehalten."
            return 0
          else
            echo "Lock wird von $CURRENT_HOLDER gehalten. Warte... ($i/30)"
            sleep 1
            continue
          fi
        fi
        
        # Versuche das Lock zu erwerben
        echo "$POD_NAME" > "$LOCK_FILE"
        
        # Verifiziere, dass wir das Lock wirklich haben
        if [ "$(cat $LOCK_FILE)" == "$POD_NAME" ]; then
          echo "Lock erfolgreich erworben von $POD_NAME."
          return 0
        fi
        
        echo "Lock konnte nicht erworben werden. Warte... ($i/30)"
        sleep 1
      done
      
      echo "Konnte Lock nach 30 Versuchen nicht erwerben."
      return 1
    }
    
    # Funktion zum Freigeben des Locks
    release_lock() {
      if [ -f "$LOCK_FILE" ]; then
        CURRENT_HOLDER=$(cat "$LOCK_FILE")
        if [ "$CURRENT_HOLDER" == "$POD_NAME" ]; then
          rm -f "$LOCK_FILE"
          echo "Lock wurde von $POD_NAME freigegeben."
          return 0
        else
          echo "Lock wird von $CURRENT_HOLDER gehalten, nicht von $POD_NAME."
          return 1
        fi
      else
        echo "Kein Lock vorhanden."
        return 0
      fi
    }
    
    # Funktion zum Prüfen des Lock-Status
    check_lock() {
      if [ -f "$LOCK_FILE" ]; then
        CURRENT_HOLDER=$(cat "$LOCK_FILE")
        echo "Lock wird momentan von $CURRENT_HOLDER gehalten."
        if [ "$CURRENT_HOLDER" == "$POD_NAME" ]; then
          return 0
        else
          return 1
        fi
      else
        echo "Kein Lock aktiv."
        return 1
      fi
    }
    
    # Hauptfunktion
    case "$1" in
      acquire)
        acquire_lock
        exit $?
        ;;
      release)
        release_lock
        exit $?
        ;;
      check)
        check_lock
        exit $?
        ;;
      *)
        echo "Verwendung: $0 {acquire|release|check}"
        exit 1
        ;;
    esac